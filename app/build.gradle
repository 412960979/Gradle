apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'MyInfo' // 引入自定义的插件，名称为MyInfo.properties的文件名

// 使用自定义插件里面定义的闭包
customPlugin{// 对应的task在other里面
    name = "weining"
    age = 28
    address = "广州白云区嘉禾望岗"
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.gradle"
        // AndroidManifest.xml里面的包名负责R.java文件的包名； 这里的applicationId作为应用安装在手机上的唯一标识，作用于debug和release模式
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 无论是debug模式还是release模式， 都用debug配置的签名设置
        signingConfig signingConfigs.debug
    }

    // 构建变体(对应android studio的BuildVariants)
    buildTypes {//构建类型用来为同一个app或者library配置不同的构建
        debug {
            buildConfigField "String", "API_URL", "\"http://test.example.com/api\""
            buildConfigField "boolean", "LOG_HTTP_CALLS", "true"
            resValue("string", "name", "gradle测试")
        }
//        rootProject.ext
        release {
            buildConfigField "String", "API_URL", "\"http://example.com/api\""
            buildConfigField "boolean", "LOG_HTTP_CALLS", "false"
            resValue("string", "name", "gradle正试")

            zipAlignEnabled true // 在打包时需要设置为true，能优化我们的java字节码，提高运行效率
            // ======== 配置自动压缩资源 ========
            minifyEnabled = true // 用来开启删除无用代码，比如没有引用到的代码
            shrinkResources = true // 用来开启删除无用资源，也就是没有被引用的文件
            // ==================================
            minifyEnabled true // 是否移除无用的资源, 当你设置minifyEnabled为true后，proguardRelease任务就会执行，并且在构建过程中触发ProGuard。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        staging {
            applicationIdSuffix ".staging" // com.gradle.staging，安装在手机上的包名
            versionNameSuffix "-staging"
            buildConfigField "String", "API_URL", "\"http://staging.example.com/api\""
        }
    }

    // 构建变体(对应android studio的BuildVariants)
    productFlavors {// product flavors用来为同一个app创建不同的版本
        flavorDimensions("isfree", "channel")
        free {
//            applicationId 'com.gradle'
            dimension "isfree"
        }
        paid {
//            applicationId 'com.gradle.paid'
            dimension "isfree"
        }
        googleplay { dimension "channel" }
        wandoujia { dimension "channel" }
    }

    // 过滤构建变体，本例过滤掉了wandoujia渠道的release版本
    variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('wandoujia')) {
                    variant.setIgnore(true)
                }
            }
        }
    }

    // 遍历构建变体(修改生成的apk的文件名)
    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')
            if (variant.buildType.name.equals('release')) {
                fileName = "${variant.mergedFlavor.versionName}_release_${formattedDate}.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "${variant.mergedFlavor.versionName}_debug_${formattedDate}.apk"
            } else {
                fileName = "${variant.mergedFlavor.versionName}_staging_${formattedDate}.apk"
            }
            outputFileName = fileName
        }
    }

    // 应用签名配置
    signingConfigs {
        // 这里只配置debug，release不用配置， 在defaultConfigs里面用debug就行
        debug {
            def keyStoreFileKey = "keyStore.file"

            def jksFile = (localProperties as Properties).getProperty(keyStoreFileKey)
            if (jksFile == null || jksFile == ""){
                storeFile file('../gradle.jks')// 签名文件路径
            } else {
                storeFile file(jksFile)
            }

            storePassword _storePassword
            keyAlias _keyAlias
            keyPassword _keyPassword
        }
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin" // 指定kotlin文件夹下面的文件被编译
        }
    }

    // 在使用Gradle执行release构建时，Lint检查将会执行。Lint是一个静态代码检查工具，
    // 会标识出你的布局和代码中潜在的问题。在某些情况下，甚至会阻塞构建过程。
    // 如果你的工程之前没有使用过Lint，并且你想迁移到Gradle中，Lint检查可能会有很多错误。
    // 为使构建可以进行，你可以通过关闭abortOnError忽略Lint检查，阻止它中断构建。
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])//引入libs文件夹下面的所有后缀名是jar的文件
    // implementation group: 'com.google.code.gson', name: 'gson', version:'2.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
